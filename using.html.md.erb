---
breadcrumb: PCF App Metrics Documentation
title: Monitoring and Troubleshooting Apps with PCF App Metrics
owner: PCF App Metrics
list_style_none: true
---

No content at this time.

<!-- 
This topic describes how developers can monitor and troubleshoot their apps using Pivotal Cloud Foundry (PCF) App Metrics. 

##  Overview

PCF App Metrics helps you understand and troubleshoot the health and performance of your apps.

The following sections describe a standard workflow for using PCF App Metrics to monitor or troubleshoot your apps.

## View an App

In a browser, navigate to `metrics.YOUR-SYSTEM-DOMAIN` and log in with your User Account and Authentication (UAA) credentials. Choose an app for which you want to view metrics or logs. PCF App Metrics respects UAA permissions such that you can view any app that runs in a space that you have access to. 


## Change the Time Frame

The graphs show time along the horizontal axis. You can change the time frame for all graphs and the logs by using the time selector at the top of the window. Adjust either end of the selector or click and drag.

## Stream Metrics

Streaming Metrics mode allows the metrics charts on your dashboard to be updated in real-time as metrics data is ingested.


## Add, Edit, and Delete Charts


##  View and Reorder Metric Charts


## View Metrics at App-Instance Level

PCF App Metrics relays metric data at the app-instance level to allow for an in-depth troubleshooting experience. Users are able to view the app metrics related to a specific instance index, which correlates directly with the app instance indices shown in [Apps Manager](https://docs.pivotal.io/pivotalcf/console/manage-apps.html#manage-app).


## Interpret Metrics

See the following sections to understand how to use each of the views on the dashboard to monitor and troubleshoot your app.

###  Container Metrics

Three **Container Metrics** charts are available on the PCF App Metrics dashboard:

* CPU usage percentage:<br><br>A spike in CPU might point to a process that is computationally heavy. Scaling app instances can relieve the immediate pressure, but you need to investigate the app to better understand and fix the root cause.<br><br>

* Memory usage percentage:<br><br>A consistent, gradual increase in memory might mean a resource leak in the code. Scaling app memory can relieve the immediate pressure, but you need to find and resolve the underlying issue so that it does not occur again.<br><br>

* Disk usage percentage:<br><br>A spike in disk might mean the app is writing logs to files instead of STDOUT, caching data to local disk, or serializing large sessions to disk.

###  Network Metrics

Three **Network Metrics** charts are available on the PCF App Metrics dashboard:

* Number of network requests per minute:<br><br>A spike in HTTP requests means more users are using your app. Scaling app instances can reduce the response time.<br><br>

* Number of network request errors per minute:<br><br>A spike in HTTP errors means one or more 5xx errors have occurred. Check your app logs for more information.<br><br>

* Average latency of a request in milliseconds:<br><br>A spike in response time means your users are waiting longer. Scaling app instances can spread that workload over more resources and result in faster response times.

### Events 

The **Events** graph shows the following app events: **Crash**, **Fail** (staging failures), **Update**, **Stop**, **Start**, and **SSH**. 

<%= image_tag("1-5-events-chart.png", :alt => "Events chart") %>

<p class="note"><strong>Note</strong>: The <b>SSH</b> event corresponds to someone successfully using SSH to access a container that runs an instance of the app.</p>

See the following topics for more information about app events:

* [About Starting Applications](https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/start-restart-restage.html)
* [Troubleshooting Application Deployment and Health](https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/troubleshoot-app-health.html)

### Custom Metrics

Users can configure their apps to emit custom metrics out of the [Loggregator Firehose](https://docs.pivotal.io/pivotalcf/loggregator/architecture.html#firehose) and then view these metrics on the PCF App Metrics dashboard.

For more information about how to configure apps to emit custom metrics on PCF v2.2 through v2.4, see [Metrics Forwarder for PCF](https://docs.pivotal.io/metrics-forwarder/index.html). 

For more information about how to configure apps to emit custom metrics on PCF v2.5 and later, see [Configuring the Metric Registrar](https://docs.pivotal.io/pivotalcf/metric-registrar/index.html).

If you have configured the apps correctly, you should be able to automatically see custom metrics on the PCF App Metrics dashboard when you add a chart.

In addition, Spring Boot apps with actuators implemented emit [Spring Boot Actuator metrics](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html) out of the box, without any changes to source code. In PCF App Metrics, these metrics look similar to the following:

<%= image_tag("1-5-spring-boot-metric-chart.png", :alt => "Create Spring Boot metric charts") %>

### Access Metrics Data Through MySQL
You can access metrics data through the PCF App Metrics datastore.

The table below provides login information.

| Element      |    Details                                                                         |
|----------|-----------------------------------------------------------------------------------------|
| URL      |    MySQL VM IP                                                                          |
| Port     |    3306                                                                                 |
| Username |    MYSQL_USER defined in the environment of the `metrics-queue` app                     |
| Password |    MYSQL_PASSWORD defined in the environment of the `metrics-queue` app                 |
| Database |    metrics                                                                              |
| Tables   |    app_event and app_metric                                                             |

To access the MySQL datastore, you can do the following:

**Method 1.** Use BOSH to SSH into the MySQL VM and run the `/var/vcap/packages/pxc/bin/mysql -u<Username> -P<Port> -h<URL> -p` command.

**Method 2.** Assign an external IP to the MySQL VM and a firewall rule to open ports 3306 and 3308 and access MySQL externally.

**Method 3.** Open a tunnel into your IaaS network and connect that way externally.


### Logs

The **Logs** view displays app log data ingested from the Loggregator Firehose:

<p class="note"><strong>Note</strong>: Logs with non-UTF-8 characters or non-standard UUID application GUIDs are not stored.</p>


### Access Logs Data Through PostgreSQL
You can access logs data through the PCF App Metrics datastore.

The table below provides login information.
	
| Element      |    Details                                                                         |
|----------|-----------------------------------------------------------------------------------------|
| URL      |    PostgreSQL VM IP                                                                     |
| Port     |    5524                                                                                 |
| Username |    POSTGRES_USERNAME defined in the environment of the `logs-queue` app                 |
| Password |    POSTGRES_PASSWORD defined in the environment of the `logs-queue` app                 |
| Database |    metrics                                                                              |
| Tables   |    app_log                                                                              |


To access the PostgreSQL datastore, you can do the following:

**Method 1.** Use BOSH to SSH into the PostgreSQL VM and run the `/var/vcap/packages/postgres-9.6.8/bin/psql -U<Username> -p<Port> <Database>` command.

**Method 2.** Open a tunnel into your IaaS network and connect that way externally.


## Trace App Requests

A request to one of your apps initiates a workflow within the app or system of apps. The record of this workflow is a _trace_, which you can use to troubleshoot app failures and latency issues. In the Trace Explorer view, PCF App Metrics displays an interactive graph of a trace and its corresponding logs. See the sections below to understand how to use the Trace Explorer.

For more information about traces, see [What is a Trace?](http://opentracing.io/documentation/#what-is-a-trace) in the _Open Tracing_ documentation. 

### Prerequisites

PCF App Metrics constructs the Trace Explorer view using trace IDs shared across app logs. Before you [use the Trace Explorer](#trace-explorer), examine the following list to ensure PCF App Metrics can extract the necessary data from your app logs for your specific app type. 

* **Spring**: Follow the steps below.
1. Ensure you are using Spring Boot v1.4.3 or later. 
1. Ensure you are using Spring Cloud Sleuth v1.0.12 or later. 
1. Add the following to your app dependency file:
<pre>dependencies { (2)
compile "org.springframework.cloud:spring-cloud-starter-sleuth"
}</pre>
* **Node.js**, **Go**, and **Python**: Ensure that the servers associated with your app do not modify HTTP requests in a way that removes the `X-B3-TraceId`, `X-B3-SpanId`, and `X-B3-ParentSpan` headers from a request. You also need to add Trace ID, Span ID, and Parent Span ID to the SLF4J MDC in your app logs to correlate logs within the Trace Explorer.
* **Ruby**: Ruby servers that use a library depending on Rack modify HTTP request headers in a way that is incompatible with PCF App Metrics. If you want to trace app requests for your Ruby apps, ensure that your framework does not rely on Rack. You may need to write a raw Ruby server that preserves the `X-B3-TraceId`, `X-B3-SpanId`, and `X-B3-ParentSpan` headers in the request. You also need to add Trace ID, Span ID, and Parent Span ID to the SLF4J MDC in your app logs to correlate logs within the Trace Explorer.

### Use the Trace Explorer

This section explains how to view the trace for a request received by your app and interact with the Trace Explorer.
 -->